apply plugin: 'com.android.application'

dependencies {
  api 'com.google.dagger:dagger:2.23.1'
  annotationProcessor 'com.google.dagger:dagger-compiler:2.23.1'

  api 'com.google.dagger:dagger-android:2.23.1'
  api 'com.google.dagger:dagger-android-support:2.23.1'
  annotationProcessor 'com.google.dagger:dagger-android-processor:2.23.1'

  api 'androidx.multidex:multidex:2.0.0'

  api 'com.google.guava:guava:27.0.1-android'

  api project(':material-components-lib')

  api compatibility("recyclerViewSelection")
}

def srcDirs = [
  'application',
  'application/attrs',
  'application/legacymultidex',
  'application/scope',
  'application/theme',
  'assets',
  'bottomappbar',
  'bottomnav',
  'bottomsheet',
  'button',
  'card',
  'checkbox',
  'chip',
  'dialog',
  'draggable',
  'elevation',
  'fab',
  'feature',
  'font',
  'internal',
  'main',
  'menu',
  'picker',
  'radiobutton',
  'shapetheming',
  'switchmaterial',
  'tableofcontents',
  'tabs',
  'textfield',
  'themeswitcher',
  'topappbar',
  'transformation'
]

android {

  compileSdkVersion buildSdkVersion

  defaultConfig {
    manifestPlaceholders = [
      application_name             : 'CatalogApplication',
      application_theme            : 'Catalog',
      catalog_application_component: 'io.material.catalog.application.DaggerCatalogApplicationComponent'
    ]
    vectorDrawables.useSupportLibrary = true
    minSdkVersion minSupportedSdkVersion
    targetSdkVersion buildSdkVersion
    versionCode 1
    versionName "1.0"
    testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
  }

  aaptOptions {
    additionalParameters "--no-version-vectors"
  }

  sourceSets {
    main {
      manifest.srcFile 'java/io/material/catalog/AndroidManifest.xml'
      java.srcDir 'java'
      java.includes = srcDirs.collect { 'io/material/catalog/' + it + '/**/*.java' }
      java.excludes = [
        '**/build/**',
      ]
      res.srcDirs = ['java/io/material/catalog/res']
      srcDirs.forEach {
        res.srcDirs += 'java/io/material/catalog/' + it + '/res'
      }
    }
  }

  compileOptions {
    sourceCompatibility JavaVersion.VERSION_1_8
    targetCompatibility JavaVersion.VERSION_1_8
  }
}

private def getTransformedProjectPath(projectPath) {
  def pathComponents = projectPath.tokenize('/')
  def result = ''
  def currentPath = ''
  pathComponents.each { component ->
    if (currentPath == '') {
      currentPath += component
    } else {
      currentPath += '-' + component
    }
    result += ':' + currentPath
  }
  return result
}

/**
 * Return the module dependency for the given compatibility library name.
 *
 */
def compatibility(name) {
  switch (name) {
    case "annotation":
      return "androidx.annotation:annotation:${androidXVersions.annotation}"
    case "appcompat":
      return "androidx.appcompat:appcompat:${androidXVersions.appCompat}"
    case "cardview":
      return "androidx.cardview:cardview:${androidXVersions.cardView}"
    case "coordinatorlayout":
      return "androidx.coordinatorlayout:coordinatorlayout:${androidXVersions.coordinatorlayout}"
    case "core":
      return "androidx.core:core:${androidXVersions.core}"
    case "core_ui":
      return "androidx.legacy:legacy-support-core-ui:${androidXVersions.legacySupportCoreUi}"
    case "core_utils":
      return "androidx.legacy:legacy-support-core-utils:${androidXVersions.legacySupportCoreUtils}"
    case "fragment":
      return "androidx.fragment:fragment:${androidXVersions.fragment}"
    case "lifecycleCommonJava8":
      return "androidx.lifecycle:lifecycle-common-java8:${androidXVersions.lifecycle}"
    case "lifecycleRuntime":
      return "androidx.lifecycle:lifecycle-runtime:${androidXVersions.lifecycle}"
    case "recyclerview":
      return "androidx.recyclerview:recyclerview:${androidXVersions.recyclerView}"
    case "transition":
      return "androidx.transition:transition:${androidXVersions.transition}"
    case "vectordrawable":
      return "androidx.vectordrawable:vectordrawable:${androidXVersions.vectorDrawable}"
    case "recyclerViewSelection":
      return "androidx.recyclerview:recyclerview-selection:${androidXVersions.recyclerViewSelection}"
    case "viewpager2":
      return "androidx.viewpager2:viewpager2:${androidXVersions.viewpager2}"
    default:
      throw new IllegalArgumentException("No mapping exists for name: $name.")
  }
}
