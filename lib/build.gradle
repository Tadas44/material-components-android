apply plugin: 'com.android.library'

archivesBaseName = getArchivesBaseName(project.name)
version = rootProject.ext.mdcLibraryVersion

dependencies {
  api compatibility("annotation")
  api compatibility("appcompat")
  api compatibility("cardview")
  api compatibility("coordinatorlayout")
  api compatibility("core")
  api compatibility("core_ui")
  api compatibility("core_utils")
  api compatibility("fragment")
  api compatibility("recyclerview")
  api compatibility("transition")
  api compatibility("vectordrawable")
  api compatibility("viewpager2")

  testImplementation "androidx.test:core:${project.rootProject.ext.testRunnerVersion}"
  testImplementation "androidx.test:runner:${project.rootProject.ext.testRunnerVersion}"
  testImplementation "junit:junit:4.12"
  testImplementation "com.google.truth:truth:0.35"
  testImplementation "org.mockito:mockito-core:1.9.5"
  testImplementation "org.robolectric:robolectric:4.3-alpha-2"

  testAnnotationProcessor "com.google.auto.service:auto-service:1.0-rc4"
}

def srcDirs = [
  'com/google/android/material/animation',
  'com/google/android/material/appbar',
  'com/google/android/material/badge',
  'com/google/android/material/behavior',
  'com/google/android/material/bottomappbar',
  'com/google/android/material/bottomnavigation',
  'com/google/android/material/bottomsheet',
  'com/google/android/material/button',
  'com/google/android/material/canvas',
  'com/google/android/material/card',
  'com/google/android/material/checkbox',
  'com/google/android/material/chip',
  'com/google/android/material/circularreveal',
  'com/google/android/material/circularreveal/cardview',
  'com/google/android/material/circularreveal/coordinatorlayout',
  'com/google/android/material/color',
  'com/google/android/material/dialog',
  'com/google/android/material/drawable',
  'com/google/android/material/elevation',
  'com/google/android/material/expandable',
  'com/google/android/material/floatingactionbutton',
  'com/google/android/material/internal',
  'com/google/android/material/math',
  'com/google/android/material/menu',
  'com/google/android/material/navigation',
  'com/google/android/material/picker',
  'com/google/android/material/radiobutton',
  'com/google/android/material/resources',
  'com/google/android/material/ripple',
  'com/google/android/material/shape',
  'com/google/android/material/shadow',
  'com/google/android/material/snackbar',
  'com/google/android/material/stateful',
  'com/google/android/material/switchmaterial',
  'com/google/android/material/tabs',
  'com/google/android/material/textfield',
  'com/google/android/material/theme',
  'com/google/android/material/transformation',
  'com/google/android/material/typography',
]

android {

  compileSdkVersion buildSdkVersion

  defaultConfig {
    minSdkVersion minSupportedSdkVersion
    targetSdkVersion buildSdkVersion
    versionCode 1
    versionName "1.0"
    testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
  }

  sourceSets {
    main.manifest.srcFile 'java/com/google/android/material/AndroidManifest.xml'
    main.java.srcDir 'java'
    main.java.includes = srcDirs.collect { it + '/**/*.java' }
    main.java.excludes = [
      '**/build/**',
    ]
    srcDirs.forEach {
      main.res.srcDirs += 'java/' + it + '/res'
      main.res.srcDirs += 'java/' + it + '/res-public'
    }

    test.java.srcDir 'javatests'
  }

  testOptions.unitTests.includeAndroidResources = true

  buildTypes.all {
    consumerProguardFiles 'proguard-behaviors.pro', 'proguard-inflater.pro'
  }

  compileOptions {
    targetCompatibility = "8"
    sourceCompatibility = "8"
  }

}

// Add the resource directories to the main sourceSet for all test tasks
gradle.projectsEvaluated {
  tasks.withType(Test) { task ->
    srcDirs.forEach {
      android.sourceSets.main.res.srcDirs += 'javatests/' + it + '/res'
    }
  }
}

task getVersion {
  doLast {
    println version
  }
}


def addResources(tasks) {
  tasks.each {
    def releaseVariant = android.libraryVariants.find { it.name == 'release' }
    it.classpath += files(android.libraryVariants.collect { variant ->
      variant.javaCompile.classpath.files
    })
    it.classpath += releaseVariant.getCompileClasspath(null)
    it.classpath += it.project.files(releaseVariant.javaCompile.destinationDir)
    it.source += releaseVariant.javaCompile.source
  }
}

private def getTransformedProjectPath(projectPath) {
  def pathComponents = projectPath.tokenize('/')
  def result = ''
  def currentPath = ''
  pathComponents.each { component ->
    if (currentPath == '') {
      currentPath += component
    } else {
      currentPath += '-' + component
    }
    result += ':' + currentPath
  }
  return result
}

def compatibility(name) {
  switch (name) {
    case "annotation":
      return "androidx.annotation:annotation:${androidXVersions.annotation}"
    case "appcompat":
      return "androidx.appcompat:appcompat:${androidXVersions.appCompat}"
    case "cardview":
      return "androidx.cardview:cardview:${androidXVersions.cardView}"
    case "coordinatorlayout":
      return "androidx.coordinatorlayout:coordinatorlayout:${androidXVersions.coordinatorlayout}"
    case "core":
      return "androidx.core:core:${androidXVersions.core}"
    case "core_ui":
      return "androidx.legacy:legacy-support-core-ui:${androidXVersions.legacySupportCoreUi}"
    case "core_utils":
      return "androidx.legacy:legacy-support-core-utils:${androidXVersions.legacySupportCoreUtils}"
    case "fragment":
      return "androidx.fragment:fragment:${androidXVersions.fragment}"
    case "lifecycleCommonJava8":
      return "androidx.lifecycle:lifecycle-common-java8:${androidXVersions.lifecycle}"
    case "lifecycleRuntime":
      return "androidx.lifecycle:lifecycle-runtime:${androidXVersions.lifecycle}"
    case "recyclerview":
      return "androidx.recyclerview:recyclerview:${androidXVersions.recyclerView}"
    case "transition":
      return "androidx.transition:transition:${androidXVersions.transition}"
    case "vectordrawable":
      return "androidx.vectordrawable:vectordrawable:${androidXVersions.vectorDrawable}"
    case "recyclerViewSelection":
      return "androidx.recyclerview:recyclerview-selection:${androidXVersions.recyclerViewSelection}"
    case "viewpager2":
      return "androidx.viewpager2:viewpager2:${androidXVersions.viewpager2}"
    default:
      throw new IllegalArgumentException("No mapping exists for name: $name.")
  }
}

def fromPath(path) {
  return getTransformedProjectPath(path)
}

def getArchivesBaseName(name) {
  if (name == 'lib') {
    return 'material'
  }
  def pathComponents = name.tokenize('-')
  def knownComponents = ['lib', 'java', 'com', 'google', 'android', 'material']
  def firstUnknownComponent = knownComponents.size();
  for (def i = 0; i < knownComponents.size() && i < pathComponents.size(); i++) {
    if (pathComponents[i] != knownComponents[i]) {
      firstUnknownComponent = i;
      break;
    }
  }
  def result = 'material'
  for (def i = firstUnknownComponent; i < pathComponents.size(); i++) {
    result = result + '-' + pathComponents[i];
  }
  return result;
}

